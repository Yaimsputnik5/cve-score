#!/usr/bin/env python3

import re
import json
import logging
import argparse
import settings
import numpy as np
from core.transform import compose, get_key

_patterns = None

def set_patterns(patterns):
    global _patterns
    logging.info('compiling %s', patterns)
    _patterns = list(map(re.compile, patterns))

def apply_patterns(tokens):
    return [any(map(pattern.search, tokens)) for pattern in _patterns]


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('infile', help='one JSON object per line')
    parser.add_argument('outfile', help='serialized numpy outfile')
    parser.add_argument('--keyname', required=True, help='target in JSON records')
    parser.add_argument('--patterns', required=True, nargs='+',
        help='list of regex patterns, whitespace separated'
    )
    parser.add_argument('--require-all', action='store_true',
        help='apply boolean AND [default is OR] for multi-patterns'
    )
    args = parser.parse_args()

    set_patterns(args.patterns)
    transform = compose(
        float,
        all if args.require_all else any,
        apply_patterns,
        get_key(args.keyname),
        json.loads
    )
    logging.info('reading %s', args.infile)
    labels = list(map(transform, open(args.infile)))
    logging.info('size => %d', len(labels))

    with open(args.outfile, 'wb') as fh:
        logging.info('writing %s', args.outfile)
        np.save(fh, np.array(labels))
