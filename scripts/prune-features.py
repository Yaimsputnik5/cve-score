#!/usr/bin/env python3

import re
import sys
import json
import logging
import argparse
import settings
from collections import Counter
from core.encoder import flatten

_selectors = None
_counters = None

def _to_integer(token):
    '''Casts token to an integer or None if it is invalid.'''
    try:
        return int(token)
    except:
        return None

def get_selectors(tokens):
    '''Unpacks the list of "<prefix>:<top_n>" strings.'''
    parsed = [list(map(str.strip, item.split(':'))) for item in tokens]
    invalid = [item for item in parsed if len(item) < 2]
    if invalid:
        raise Exception('invalid selectors: %s' % invalid)

    return dict((item[0], _to_integer(item[1])) for item in parsed)

def update_counters(document):
    '''Increments all counters for the "feature document."
    '''
    flat = flatten(document)
    for (prefix, counter) in _counters.items():
        counter.update([key for key in flat if key.startswith(prefix)])

def prune(with_freqs=False):
    '''Applies filtering to the accumulated counters, returning a list of
    tokens.

    Arguments:
        with_freqs  [bool] if True, returns a list of (token, count) pairs,
                        analogous to Counter.most_common method.
    '''
    tokens = []
    for (prefix, count) in sorted(_selectors.items()):
        values = _counters[prefix].most_common(count)
        if not with_freqs:
            values = [item[0] for item in values]
        tokens.extend(values)

    return tokens

def write_debug(filename=None):
    '''Emits debug output to specified file.'''
    if not filename:
        return
    with open(filename, 'w') as fh:
        logging.info('writing %s', filename)
        for pair in prune(True):
            fh.write('{0:50s} {1}\n'.format(*pair))

def write_config(filename=None):
    '''Writes an Encoder config object to the specified file.'''
    if not filename:
        return

    config = {
        'Encoder': dict(dimensions=prune())
    }
    with open(filename, 'w') as fh:
        logging.info('writing Encoder to %s', filename)
        json.dump(config, fh)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('infile', help='one JSON object per line')
    parser.add_argument('--encoder', help='JSON Encoder config to emit')
    parser.add_argument('--debug', help='file to write (token, count) pairs')
    parser.add_argument('--selectors', required=True, nargs='+',
        help=('list of <prefix>:<top_n> pairs; '
            'use "<prefix>:ALL" to capture all tokens with the prefix')
    )
    args = parser.parse_args()
    settings.configure_logging()

    if not (args.encoder or args.debug):
        print('requires either --encoder or --debug argument')
        sys.exit(1)

    _selectors = get_selectors(args.selectors)
    logging.info('using selectors %s', _selectors)
    _counters = dict((prefix, Counter()) for prefix in _selectors.keys())

    logging.info('reading %s', args.infile)
    for record in open(args.infile):
        update_counters(json.loads(record))

    write_debug(args.debug)
    write_config(args.encoder)
