#!/usr/bin/env python3

import argparse
import joblib
import json
import logging

import numpy as np
from scipy import sparse
from sklearn.linear_model import SGDClassifier
import settings


LOGGER = logging.getLogger('cve-score')

CLF_DEFAULTS = {
    'loss': 'log',
    'penalty': 'elasticnet',
    'alpha': 1e-4,
    'l1_ratio': 0.0,
    'tol': 1e-4,
}

_PARSER = argparse.ArgumentParser()
_PARSER.add_argument('command', help='train|predict')
_PARSER.add_argument('dataset', help='serialized dict of numpy arrays')
_PARSER.add_argument('estimator', help='serialized sklearn estimator')
_PARSER.add_argument('predictions', nargs='?',
    help='output of "predict" command')
_PARSER.add_argument('--feature-key', required=True,
    help='feature key in dataset')
_PARSER.add_argument('--label-key', help='label key in dataset')
_PARSER.add_argument('--alpha', type=float, default=1e-4,
    help='classifier L2 penalty term')
_PARSER.add_argument('--l1-ratio', type=float, default=0,
    help='classifier Elastic Net mixing parameter')


def deserialize(filename):
    LOGGER.info('loading %s', filename)
    return joblib.load(filename)


def serialize(filename, object_):
    LOGGER.info('writing %s', filename)
    joblib.dump(object_, filename)


def train(dataset, estimator, feature_key, label_key, **kwargs):
    '''Implements the "train" command.'''
    data = deserialize(dataset)
    features = data[feature_key]
    labels = data[label_key]
    LOGGER.info('features.shape => %s', features.shape)
    params = {
        key: kwargs.get(key, default)
        for (key, default) in CLF_DEFAULTS.items()
    }
    LOGGER.info('estimator params => %s', json.dumps(params))
    clf = SGDClassifier(**params)
    clf.fit(features, labels)
    serialize(estimator, clf)


def predict(dataset, estimator, predictions, feature_key, label_key, **kwargs):
    '''Implements the "predict" command.'''
    data = deserialize(dataset)
    features = data[feature_key]
    labels = data[label_key]
    clf = deserialize(estimator)
    class_probs = clf.predict_proba(features)
    pred_data = dict(scores=class_probs[:,1])
    if label_key is not None:
        pred_data[label_key] = labels
    serialize(predictions, pred_data)


if __name__ == '__main__':
    args = _PARSER.parse_args()
    settings.configure_logging()

    if args.command == 'train':
        train(**vars(args))
    elif args.command == 'predict':
        predict(**vars(args))
