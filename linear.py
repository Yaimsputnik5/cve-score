#!/usr/bin/env python3

import click
import json
import logging

from sklearn.linear_model import SGDClassifier
from sklearn.metrics import roc_auc_score

from common import serialize, deserialize
from common import to_sklearn_format
import settings

LOGGER = logging.getLogger('cve-score')

CLF_DEFAULTS = {
    'loss': 'log',
    'penalty': 'l2',
    'class_weight': 'balanced',
    'tol': 1e-4,
}


@click.group()
def cli():
    pass


@cli.command()
@click.argument('dataset')
@click.argument('model')
@click.option('--features', '-x', multiple=True, required=True,
    help='key names of feature columns in dataset')
@click.option('--label', '-y', required=True,
    help='key label column in dataset')
@click.option('--alpha', type=float, default=1e-4, show_default=True)
def train(dataset, model, features, label, alpha):
    '''Trains a linear classifier via SGD.

    The DATASET should be a serialized dictionary of NumPy tensors.
    The emitted MODEL is a serialized dictionary including the sklearn
    estimator, and some meta-data about the features and labels.
    '''
    data = deserialize(dataset)
    feature_matrix, label_col = to_sklearn_format(
        data, features, label)
    params = dict(CLF_DEFAULTS, alpha=alpha)
    LOGGER.info('estimator params => %s', json.dumps(params))
    estimator = SGDClassifier(**params)
    estimator.fit(feature_matrix, label_col)
    serialize(model,
        dict(features=features, label=label, estimator=estimator))


@cli.command()
@click.argument('model')
@click.argument('dataset')
def eval(dataset, model):
    '''Performs inference of a trained model against the dataset.

    Both MODEL and DATASET should be serialized dictionaries. MODEL should
    contain a "label" key, referencing a key in DATASET is a column of ground-
    truth labels. These are used to score the inferred probabilities.
    '''
    data = deserialize(dataset)
    model = deserialize(model)
    feature_matrix, label_col = to_sklearn_format(
        data, model['features'], model['label'])
    class_probs = model['estimator'].predict_proba(feature_matrix)
    metrics = dict(AUC=roc_auc_score(label_col, class_probs[:, 1]))
    LOGGER.info('metrics => %s', json.dumps(metrics))


if __name__ == '__main__':
    settings.configure_logging()
    cli()
