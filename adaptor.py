import json
import logging

import tensorflow as tf

LOGGER = logging.getLogger('cve-score')


class JSONAdaptor(object):
    '''Adaptor class for converting stream of JSON records into a
    `tf.data.Dataset` iterator of fixed-length Tensors.

    The main assumption is that, for each training example, the feature is
    given via an array of (string) tokens, and will be encoded via
    bag-of-words for a fixed vocabulary. Initialization requires a
    configuration object specifying the details of the incoming data
    stream. It is a dictionary with the fields:

      "feature"    [str]:   Key of feature object in each JSON record.
      "vocabulary" [list]:  Tokens defining bag-of-word encoding.
      "target"     [str]:   Key of target object; will be cast to 0/1.
    '''
    def __init__(self, config, filename):
        '''Arguments:
            config    [dict]  See class docstring.
            filename  [str]   JSON examples, one per line.
        '''

        feature = config['feature']
        target = config['target']
        index = {token: i for (i, token) in enumerate(config['vocabulary'])}

        self._feature_dim = len(index)

        self._features = []
        self._targets = []
        with open(filename) as fh:
            for record in map(json.loads, fh):
                self._features.append(
                    # store only "column ids" for comporesion.
                    set([index[token] for token in record[feature]
                    if token in index]))
                self._targets.append(record[target])

        LOGGER.info('read %d records from %s', len(self._features), filename)

    @property
    def types(self):
        '''Ouput types for use with `tf.data.Dataset.from_generator`'''
        return (tf.float32, tf.int64)

    @property
    def shapes(self):
        '''Output shapes for use with `tf.data.Dataset.from_generator`'''
        return (tf.TensorShape([self._feature_dim]), tf.TensorShape([]))

    def generator(self):
        '''Generator object for use with `tf.data.Dataset.from_generator`'''
        cols = list(range(self._feature_dim))
        for ex_ptr in range(len(self._features)):
            onehot = [
                (1.0 if j in self._features[ex_ptr] else 0.0) for j in cols]

            yield (onehot, self._targets[ex_ptr])
