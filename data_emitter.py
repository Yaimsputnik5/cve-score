import logging
import numpy as np
from scipy import sparse
from sklearn import model_selection
from collections import namedtuple


class DataEmitter(object):
    '''Container for numpy training data. Exposes `features` and `labels`
    properties, in addition to helper methods.
    '''
    def __init__(self, feats_src, labels_src, random_state=1337, **kwargs):
        '''Arguments:
            feats_src:    [str|file] NPZ formatted sparse.csr_matrix
            labels_src:   [str|file] NPZ formatted np.array
            random_state: [object] initializer for numpy.RandomState
        '''
        logging.info('loading %s', labels_src)
        self.labels = np.load(labels_src)
        logging.info('loading %s', feats_src)
        self.features = sparse.load_npz(feats_src)
        logging.info('features.shape => %s', self.features.shape)

        if self.features.shape[0] != self.labels.shape[0]:
            raise ValueError('size mismatch between features, labels')

        self._rng = np.random.RandomState(random_state)

    def split(self, test_size=0.2):
        '''Returns (X_train, X_test, y_train, y_test) split.'''
        return model_selection.train_test_split(
            self.features, self.labels,
            test_size=test_size, random_state=self._rng)
