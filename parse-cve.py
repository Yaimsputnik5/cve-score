#!/usr/bin/env python3

import os
import re
import glob
import json
import logging
import argparse
import settings
from collections import defaultdict

CVE_RE = re.compile('CVE-\d{4}-\d+')


def extract_cves(filename):
    '''Applies regex matching to file contents.'''
    with open(filename) as fh:
        logging.info('scanning %s', filename)
        return CVE_RE.findall(fh.read())

def _parse_exploit_db_path(filename):
    return filename.split('platforms/')[1]

def index_exploit_db(prefix):
    '''Indexes all exploit-db exploits. Returns a list of records
        {
            cveid: "CVE-YYYY-nnnn",
            exploitdb: "<list of exploits>"
        }
    '''
    index = defaultdict(list)
    search = os.path.join(prefix, 'platforms', '**')
    logging.debug('searching %s', search)
    for filename in filter(os.path.isfile, glob.glob(search, recursive=True)):
        for cveid in extract_cves(filename):
            index[cveid].append(_parse_exploit_db_path(filename))

    return [
        dict(cveid=cveid, exploitdb=data) for (cveid, data) in index.items()
    ]

def write_records(outfile, data):
    with open(outfile, 'w') as fh:
        logging.info('writing %d records to %s', len(data), outfile)
        for record in data:
            fh.write('%s\n' % json.dumps(record))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('outfile')
    parser.add_argument('--exploit-db', help='path prefix for exploit-db data')
    parser.add_argument('--logging', help='JSON file for basicConfig')
    args = parser.parse_args()

    settings.configure_logging(args.logging)

    if args.exploit_db:
        records = index_exploit_db(args.exploit_db)
        write_records(args.outfile, records)
