#!/usr/bin/env python3

import argparse
import logging
import shutil
import json

import tensorflow as tf

from encoding import get_parser
from encoding import get_feature_columns
from settings import configure_logging

LOGGER = logging.getLogger('cve-score')
BUFFER_SIZE = 100000  # sample size of shuffle operation


def get_batch(filename, batch_size, parser, shuffle=False):
    '''Returns a tf.data.Iterator for one epoch.

    Arguments:
        filename    [str] file of TFRecords.
        batch_size  [int] batch size per step.
        parser      [lambda] mapping `tf.Example => `(<tensors>, <tensor>)`
        shuffle     [bool] Randomize the order of examples.
    '''
    ds = tf.data.TFRecordDataset([filename])
    if shuffle:
        ds = ds.shuffle(BUFFER_SIZE)

    ds = ds.map(parser).batch(batch_size)
    iter_ = ds.make_one_shot_iterator()
    return iter_.get_next()


def main(_):
    shutil.rmtree(FLAGS.model_dir, ignore_errors=True)

    with open(FLAGS.config) as fh:
        config = json.load(fh)

    parser = get_parser(config)

    estimator = tf.estimator.LinearClassifier(
        feature_columns=get_feature_columns(config),
        model_dir=FLAGS.model_dir,
        optimizer=tf.train.FtrlOptimizer(FLAGS.learning_rate))

    for epoch in range(FLAGS.num_epochs):
        estimator.train(
            lambda: get_batch(FLAGS.train, FLAGS.batch_size, parser, True))
        _ = estimator.evaluate(
            lambda: get_batch(FLAGS.eval, FLAGS.batch_size, parser))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('config', help='JSON config for pasing examples')
    parser.add_argument('train', help='JSONL training examples')
    parser.add_argument('eval', help='JSONL validation examples')
    parser.add_argument('--model-dir', default='/tmp/cve-softmax')
    parser.add_argument('--num-epochs', type=int, default=10)
    parser.add_argument('--batch-size', type=int, default=64)
    parser.add_argument('--learning-rate', type=float, default=1e-2)
    FLAGS = parser.parse_args()
    configure_logging()

    tf.app.run()
