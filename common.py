import joblib
import json
import logging

import numpy as np
import pandas as pd
from scipy import sparse

LOGGER = logging.getLogger('cve-score')


def load_json(filename):
    '''Reads a JSON object from a file.'''
    with open(filename) as fh:
        LOGGER.info('reading %s', filename)
        return json.load(fh)


def dump_json(filename, data):
    '''Writes a JSON-serializable object to a file.'''
    with open(filename, 'w') as fh:
        LOGGER.info('writing %s', filename)
        json.dump(data, fh)


def deserialize(filename):
    '''Loads a pickled object.'''
    LOGGER.info('reading %s', filename)
    return joblib.load(filename)


def serialize(filename, object_):
    '''Writes an object to a pickle file.'''
    LOGGER.info('writing %s', filename)
    joblib.dump(object_, filename)


def write_csv(filename, **kwargs):
    '''Writes columnar arrays to a CSV file.'''
    data = {
        name: column for (name, column) in kwargs.items()
        if column is not None
    }
    n_rows = len(next(iter(data.values())))
    frame = pd.DataFrame(data, range(1, n_rows + 1))
    LOGGER.info('writing %s with columns: %s',
        filename, json.dumps(list(frame.columns)))
    frame.to_csv(filename, index_label='row_id')


def to_sklearn_format(data, feature_keys, label_key=None):
    '''Massages a dictionary of numpy arrays into a pair consumable by
    estimators in the sklearn API.

    Arguments:
        data: dictionary associating names to NumPy/SciPy tensors.
        feature_keys: list of keys for the tensors to concatenate
            "horizontally" into a feature matrix.
        label_key: [str|None] selects the array in `data` for the labels.

    Returns a pair (X, y), where y is `None` if label_key is not supplied.
    '''
    feature_keys = [key for key in feature_keys if key in data]
    LOGGER.info('using features: %s', json.dumps(feature_keys))

    labels = data.get(label_key)
    features = [data[key] for key in feature_keys]
    feature_types = set(map(type, features))
    if len(feature_types) > 1:
        raise ValueError(f'Mixed feature types: {feature_types}')
    if isinstance(features[0], np.ndarray):
        return np.hstack(features), labels
    elif isinstance(features[0], sparse.spmatrix):
        return sparse.hstack(features), labels
