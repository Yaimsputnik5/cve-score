import logging
from scipy import sparse


class Encoder(object):
    '''One-hot encoder for tokenized documents.'''
    def __init__(self, dimensions):
        '''Arguments:
            dimensions:  [list] list of tokens defining the "vocabulary"
                            and ordering of the vectorization.
        '''
        self._size = len(dimensions)
        self._dimensions = dict(zip(dimensions, range(self._size)))
        logging.info('Encoder init %d dimensions', self._size)

    def _encode(self, document):
        '''Transforms the document into a sparse row vector, represented as a
        `scipy.csr_matrix`.
        '''
        col_ind = [
            self._dimensions[key] for key in document if key in self._dimensions
        ]
        values = [1.0] * len(col_ind)
        row_ind = [0] * len(col_ind)

        if not values:
            logging.warn('orthogonal feature set: %s', document)

        return sparse.csr_matrix(
            (values, (row_ind, col_ind)), shape=(1, self._size))

    def eval(self, documents):
        '''
        Arguments:
            documents  [iter] iterator of documents, ie, lists of tokens.

        Returns: [scipy.csr_matrix]
            Shape (n_doc, n_dim), where n_doc is the number of items returned
            by the interator, n_dim is the number of allocated dimensions.
        '''
        return sparse.vstack(map(self._encode, documents))
