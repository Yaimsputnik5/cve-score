
def flatten(document):
    '''Flattens a nested "document" of dictonaries and lists into a single
    list of `<path>:<leaf>` strings.
    '''
    state = []
    def recur(key, value):
        # Unpacks the `value` object to recursively add keys to the state
        if isinstance(value, dict):
            for child, new_value in value.items():
                new_key = '.'.join(filter(None, [key, child]))
                recur(new_key, new_value)
        elif isinstance(value, list):
            for child in value:
                recur(key, child)
        else:
            state.append(':'.join(filter(None, [key, str(value)])))

    if isinstance(document, dict):
        for key, value in document.items():
            recur(key, value)
    else:
        recur('', document)

    return state
