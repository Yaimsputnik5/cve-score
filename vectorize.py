#!/usr/bin/env python3

import sys
import json
import logging
import argparse
import settings
from encoder import Encoder
import numpy as np
from scipy import sparse

def encode_labels(instream):
    '''Transforms input of "truthy" values into numpy vector.'''
    raw_data = map(json.loads, instream)
    return np.array(list(map(float, map(bool, raw_data))))

def use_onehot(cfg_file, instream):
    '''Applies one-hot encodeding to a stream of documents.

    Arguments:
        cfg_file:  [str] JSON file with Encoder config
        instream:  [file] iter of lists of (string) tokens.

    Returns: `scipy.csr_matrix`. The row dimension is the number of documents
        returned by `instream`.
    '''
    with open(cfg_file) as fh:
        logging.info('reading %s', cfg_file)
        encoder = Encoder(**json.load(fh))

    return encoder.eval(map(json.loads, instream))

def write(filename, data):
    '''Writes the transformed data to the target file.'''
    with open(filename, 'wb') as fh:
        logging.info('writing %s', filename)
        if isinstance(data, sparse.spmatrix):
            logging.info('data shape => %s', data.shape)
            logging.info('data nnz => %s', data.nnz)
            sparse.save_npz(fh, data)
        else:
            logging.info('data shape => %s', data.shape)
            np.save(fh, data)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('outfile', help='numpy in NPZ format')
    parser.add_argument('--infile', type=argparse.FileType('r'),
        default=sys.stdin, help='[stdin]')
    parser.add_argument('--labels', action='store_true',
        help='transforms data to 0/1 classes')
    parser.add_argument('--encoder', help='JSON config for Encoder class')
    parser.add_argument('--logging', help='JSON logging config')
    args = parser.parse_args()
    settings.configure_logging(args.logging)

    if args.labels:
        data = encode_labels(args.infile)
    elif args.encoder:
        data = use_onehot(args.encoder, args.infile)

    write(args.outfile, data)
