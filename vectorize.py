#!/usr/bin/env python3

import sys
import json
import logging
import argparse
import settings
from encoder import Encoder
import numpy as np
from scipy import sparse

def labler(record_stream):
    '''Maps a stream JSON objects to a "binary" numpy array.'''
    return np.array(list(map(float, map(bool, record_stream))))

def write(filename, data):
    '''Writes the transformed data to the target file.'''
    with open(filename, 'wb') as fh:
        logging.info('writing %s', filename)
        if isinstance(data, sparse.spmatrix):
            logging.info('data shape => %s', data.shape)
            logging.info('data nnz => %s', data.nnz)
            sparse.save_npz(fh, data)
        else:
            logging.info('data shape => %s', data.shape)
            np.save(fh, data)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('outfile', help='numpy in NPZ format')
    parser.add_argument('--infile', type=argparse.FileType('r'),
        default=sys.stdin, help='[stdin]')
    parser.add_argument('--labels', action='store_true',
        help='transforms data to 0/1 classes')
    parser.add_argument('--encoder', help='JSON config for Encoder class')
    parser.add_argument('--logging', help='JSON logging config')
    args = parser.parse_args()
    settings.configure_logging(args.logging)

    if args.labels:
        transformer = labler
    elif args.encoder:
        config = json.load(open(args.encoder))
        transformer = Encoder(**config).eval

    data = transformer(map(json.loads, args.infile))
    write(args.outfile, data)
