import json
import unittest
import numpy as np
from scipy import sparse
from encoding import numpy_encoder
from encoding import emit_protobufs


class TestNumpyEncoder(unittest.TestCase):

    def test_bow_encoding(self):

        config = [{
            'key': 'test',
            'vocabulary': ['foo', 'bar', 'baz']
        }]
        records = [
            {'test': ['foo', 'baz']},
            {'test': ['bar', 'baz']},
        ]

        def equal_rows(expected, actual):
            return all(expected == actual.toarray()[0])

        actual = numpy_encoder(config, map(json.dumps, records))
        encoded = actual['test']
        self.assertEqual(len(records), len(encoded))
        self.assertIsInstance(encoded[0], sparse.csr_matrix)
        self.assertTrue(equal_rows([1, 0, 1], encoded[0]))
        self.assertTrue(equal_rows([0, 1, 1], encoded[1]))

    def test_weight_encoding(self):

        config = [{
            'key': 'weight',
        }]
        records = [
            {'weight': 0.1},
        ]

        actual = numpy_encoder(config, map(json.dumps, records))
        encoded = actual['weight']
        self.assertEqual(len(records), len(encoded))
        self.assertEqual(encoded[0].dtype, np.float32)
        self.assertAlmostEqual(encoded[0][0], 0.1, 3)

    def test_weight_encoding_default(self):

        config = [{
            'key': 'weight',
        }]
        records = [
            {'missing': True},
        ]

        actual = numpy_encoder(config, map(json.dumps, records))
        encoded = actual['weight']
        self.assertEqual(encoded[0].dtype, np.float32)
        self.assertAlmostEqual(encoded[0][0], 1.0, 3)

    def test_label_encoding(self):

        config = [{
            'key': 'target',
            'isLabel': True,
        }]
        records = [
            {'target': 1},
            {'target': 0},
        ]

        actual = numpy_encoder(config, map(json.dumps, records))
        encoded = actual['target']
        self.assertEqual(len(records), len(encoded))
        self.assertEqual(encoded[0].dtype, np.int64)
        self.assertEqual(encoded[0][0], 1)
        self.assertEqual(encoded[1][0], 0)


class TestProtobufSerializer(unittest.TestCase):

    def equal_float_list(self, expected, feature):
        '''Helper method for checking `tf.train.Feature.float_list`'''
        actual = np.array(feature.float_list.value)
        return all(np.array(expected) == actual)

    def equal_fint64_list(self, expected, feature):
        '''Helper method for checking `tf.train.Feature.int64_list`'''
        actual = np.array(feature.int64_list.value)
        return all(np.array(expected, dtype=np.int64) == actual)

    def test_sparse_serializer(self):

        encoded = {
            'sparse': [
                sparse.csr_matrix(np.array([[1, 0, 1]], dtype=np.float32)),
                sparse.csr_matrix(np.array([[0, 1, 1]], dtype=np.float32)),
            ]
        }

        actual = list(emit_protobufs(encoded))
        self.assertTrue(self.equal_float_list(
            [1, 0, 1], actual[0].features.feature['sparse']))
        self.assertTrue(self.equal_float_list(
            [0, 1, 1], actual[1].features.feature['sparse']))

    def test_float_serializer(self):

        encoded = {
            'float': [
                np.array([1], dtype=np.float32),
                np.array([0], dtype=np.float32),
            ]
        }

        actual = list(emit_protobufs(encoded))
        self.assertTrue(self.equal_float_list(
            [1], actual[0].features.feature['float']))
        self.assertTrue(self.equal_float_list(
            [0], actual[1].features.feature['float']))

    def test_int64_serializer(self):

        encoded = {
            'int64': [
                np.array([1], dtype=np.int64),
                np.array([0], dtype=np.int64),
            ]
        }

        actual = list(emit_protobufs(encoded))
        self.assertTrue(self.equal_fint64_list(
            [1], actual[0].features.feature['int64']))
        self.assertTrue(self.equal_fint64_list(
            [0], actual[1].features.feature['int64']))
