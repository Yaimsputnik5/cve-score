import logging
from scipy.sparse import csr_matrix


def flatten(document):
    '''Flattens a "feature document" into dictionary whose keys are the
    full JSON path names.
    '''
    state = {}
    def recur(key, value):
        # Unpacks the `value` object to recursively add keys to the state
        if isinstance(value, dict):
            for child, new_value in value.items():
                new_key = '.'.join([key, child])
                recur(new_key, new_value)
        elif isinstance(value, list):
            for child in value:
                recur(key, child)
        else:
            new_key = '.'.join([key, str(value)])
            state[new_key] = 1

    for key, value in document.items():
        recur(key, value)

    return state


class Encoder(object):
    '''One-hot encoder for feature "documents."

    The constructor argument is a list of "dimensions" that whitelists the
    keys of flattened documents that comprise the encoding, as well as their
    ordering in the mapping to vectors. 
    '''
    def __init__(self, dimensions):
        self._size = len(dimensions)
        self._dimensions = dict(zip(dimensions, range(self._size)))
        logging.info('init Encoder for %d dimensions', self._size)

    def encode(self, document):
        '''Transforms the feature document into a sparse vector.

        Arguments:
            document  [dict] feature document.

        Returns [scipy.sparse.csr_matrix]:
            Matrix of shape (1, size), where "size" is fixed by the
            constructor argument.
        '''
        mapping = flatten(document)

        values, row_ind, col_ind = [], [], []
        for (key, value) in mapping.items():
            if key in self._dimensions:
                values.append(float(value))
                col_ind.append(self._dimensions[key])
                row_ind.append(0)

        if not values:
            logging.warn('orthogonal feature set: %s', mapping.keys())

        return csr_matrix(
            (values, (row_ind, col_ind)), shape=(1, self._size)
        )
