import unittest
from core.encoder import flatten
from core.encoder import Encoder

class TestEncoder(unittest.TestCase):

    def test_flatten_correctness(self):

        input_expected_pairs = [
            (
                {'A': 'b'},
                {'A.b': 1}
            ),
            (
                {'A': ['a', 'b']},
                {'A.a': 1, 'A.b': 1}
            )
        ]

        for input_, expected in input_expected_pairs:
            self.assertEqual(expected, flatten(input_))

    def test_encode_smoke_test(self):
        from scipy.sparse import csr_matrix

        dims = ['A.a', 'A.b', 'A.c']
        doc = {'A': ['b', 'c']}

        unit = Encoder(dims)
        vect = unit.encode(doc)
        self.assertEqual(csr_matrix, type(vect))
        self.assertEqual((1, 3), vect.shape)
        self.assertEqual(2, vect.nnz)
