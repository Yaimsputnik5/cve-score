import logging
import numpy as np
from scipy import sparse
from sklearn import metrics
from sklearn import linear_model
from collections import namedtuple

Data = namedtuple('Data', ['features', 'labels'])

MODEL_TYPES = {
    'LogisticRegression': linear_model.LogisticRegression,
}


def load_data(config):
    '''Loads scipy/numpy data from files. The `config` argument must be a
    dictionary that includes "features" and "lables" for filenames with
    the following types

        features:  scipy.sparse.csr_matrix
        labels:    numpy.array

    Returns: [Data]
    '''
    args = []
    logging.info('loading %s', config['features'])
    args.append(sparse.load_npz(config['features']))
    logging.info('loading %s', config['labels'])
    args.append(np.load(config['labels']))

    logging.info('features.shape => %s', args[0].shape)
    if args[0].shape[0] != args[1].shape[0]:
        raise ValueError('shape mismatch between features, labels')

    return Data(*args)


def scores(y_true, y_pred):
    '''
    Arguments:
        y_true  [array, shape=(n_samples,)]  Ground truth values in {0, 1}.
        y_pred  [array, shape=(n_samples,)]  Predicted values in {0, 1}.

    Returns [dict].
    '''
    methods = {
        'precision': metrics.precision_score,
        'recall': metrics.recall_score,
        'accuracy': metrics.accuracy_score,
    }
    return dict([
        (name, func(y_true, y_pred)) for (name, func) in methods.items()
    ])


def model_factory(config):
    '''Factory method for scikit-learn model objects. The `config` argument
    must be a dictionary containing the following keys:

        "class":  "<class-name>"
        "args": "<keyword args for class constructor>"

    where <class-name> is one of the keys in MODEL_TYPES.
    '''
    name, args = config['class'], config['args']
    logging.info('loading %s << %s', name, args)
    return MODEL_TYPES[name](**args)
