#!/usr/bin/env python3

import argparse
import json
import logging
import parsers

LOGGING_CFG = {
    'format': '%(asctime)s %(levelname)s %(message)s',
    'level': 'INFO'
}

PARSERS = {
    'text': parsers.TextParser,
}


def get_parser(config):
    if 'parser' not in config or config['parser'] not in PARSERS:
        raise ValueError(
            'Missing or unrecognized "parser": {}'.format(config))
    constructor = PARSERS[config['parser']]
    return constructor(**config)


if __name__ == '__main__':
    flags = argparse.ArgumentParser()
    flags.add_argument('config', help='JSON config specifying the parser')
    flags.add_argument('infile', help='file of JSON records to process')
    flags.add_argument('outfile', help='updated JSON records to emit')
    args = flags.parse_args()
    logging.basicConfig(**LOGGING_CFG)

    with open(args.config) as fh:
        config = json.load(fh)

    parser = get_parser(config)
    with open(args.infile) as f_in:
        logging.info('reading %s', args.infile)
        with open(args.outfile, 'w') as f_out:
            logging.info('writing %s', args.outfile)
            for record in map(json.loads, f_in):
                record = parser(record)
                f_out.write('{}\n'.format(json.dumps(record)))
