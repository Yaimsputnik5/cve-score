import logging
import re

from itertools import chain
from lxml.html import parse as parse_html

LOGGER = logging.getLogger('cve-score')

FILE_KEY = 'file'


class TextParser(object):
    '''Parser for reading a text file and extracting a list of tokens.

    Each input object is a dictionary expecting a `FILE_KEY` pointing to the
    source file, and returns the same dictionary with a new field with the
    extracted tokens.
    '''
    def __init__(self, regex, target_key, to_case=None, **kwargs):
        '''Arguments:
            regex: pattern defining the token(s) to extract from each file.
            target_key: name of the key holding the extracted tokens.
            to_case: [None|"lower"|"upper"] specifies target transform
                for case of captured tokens.
        '''
        self.pattern = re.compile(regex)
        self.target_key = target_key
        self.transform = getattr(str, to_case) if to_case else str

    def __call__(self, data):
        filename = data[FILE_KEY]
        try:
            with open(filename) as fh:
                raw_tokens = self.pattern.findall(fh.read())
            tokens = list(map(self.transform, raw_tokens))
            data[self.target_key] = tokens
        except Exception as ex:
            LOGGER.warn('reading %s => %s', filename, ex)

        return data


class HtmlParser(object):
    '''Parser for reading a file of HTML and extracting a list of tokens.

    Each input object is a dictionary expecting a `FILE_KEY` pointing to the
    source file, and returns the same dictionary with a new field with the
    extracted tokens.
    '''
    def __init__(self, xpath, regex, target_key, to_case=None, **kwargs):
        '''Arguments:
            xpath: restricts search space to an element of each HTML file.
            regex: pattern defining the token(s) to extract from each file.
            target_key: name of the key holding the extracted tokens.
            to_case: [None|"lower"|"upper"] specifies target transform
                for case of captured tokens.
        '''
        self.xpath = xpath
        self.pattern = re.compile(regex)
        self.target_key = target_key
        self.transform = getattr(str, to_case) if to_case else str

    def __call__(self, data):
        filename = data[FILE_KEY]
        try:
            with open(filename) as fh:
                tree = parse_html(fh)
            text_iter = chain.from_iterable(
                [node.itertext() for node in tree.xpath(self.xpath)])
            raw_tokens = chain.from_iterable(
                [self.pattern.findall(text) for text in text_iter])
            tokens = list(map(self.transform, raw_tokens))
            data[self.target_key] = tokens
        except Exception as ex:
            LOGGER.warn('reading %s => %s', filename, ex)

        return data
