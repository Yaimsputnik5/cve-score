#!/usr/bin/env python3

import click
import json
import logging

LOGGING_CFG = {
    'format': '%(asctime)s %(levelname)s %(message)s',
    'level': 'INFO',
}


def index(keyname, filename):
    '''Indexes a file of JSON records by values of a specific key.'''
    with open(filename) as fh:
        data = {record[keyname]: record for record in map(json.loads, fh)}

    logging.info('read %d unique records from %s', len(data), filename)
    return data


def merge(left_index, right_index):
    '''Merges the right records into the left records, returning the set
    of merged records.'''
    for key, record in left_index.items():
        record.update(right_index.get(key, {}))

    return left_index.values()


@click.command()
@click.argument('leftfile')
@click.argument('rightfile')
@click.argument('outfile')
@click.option('--key-name', '-k', default='cveid', show_default=True,
    help='key from left/right files on which to join')
def main(leftfile, rightfile, outfile, key_name):
    '''Takes a pair of line-delimited JSON files and performs a (left) inner
    join on the field referenced by a common key.

    The `key-name` must appear in each JSON record of both files.
    '''
    left_index = index(key_name, leftfile)
    right_index = index(key_name, rightfile)
    with open(outfile, 'w') as fh:
        logging.info('writing %s', outfile)
        for record in merge(left_index, right_index):
            fh.write(f'{json.dumps(record)}\n')


if __name__ == '__main__':
    logging.basicConfig(**LOGGING_CFG)
    main()
