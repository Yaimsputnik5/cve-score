#!/usr/bin/env python3

import argparse
import json
import logging
import os
import re
import requests
from urllib.parse import urlparse

URL_KEY = 'url'
FILE_KEY = 'file'

LOGGING_CFG = {
    'format': '%(asctime)s %(levelname)s %(message)s',
    'level': 'INFO'
}


def get_filename(url, prefix):
    '''Transforms a url of the form `<scheme>://<host>/<path>?<prams>` into
    a file name of the form `<prefix>/<host>/<valid-slug>`.
    '''
    parsed = urlparse(url)
    raw_slug = '{}/{}'.format(parsed.path, parsed.query)
    slug = '-'.join(filter(None, re.split('[^\\w\\-]+', raw_slug)))
    return os.path.join(prefix, parsed.netloc, '{}.html'.format(slug))


def write_file(filename, content):
    '''Writes `content` to the target file, ensuring all subdirectories
    in the file path exit.
    '''
    os.makedirs(os.path.dirname(filename), exist_ok=True)
    with open(filename, 'w') as fh:
        logging.info('writing %s', filename)
        fh.write(content)


def fetch(datum, prefix, **kwargs):
    '''Requests a web URL and writes the full response to a local file.
    The full path of the local file is derived from the URL and the
    `prefix` argument.

    Arguments:
        datum: dictionary with URL_KEY present for the remote url.
        prefix: path prefix for the destination file.

    Keywords: See http://docs.python-requests.org/en/master/api/

    Returns: `datum` updated with FILE_KEY for the local file.
    '''
    url = datum[URL_KEY]
    filename = get_filename(url, prefix)
    if os.path.exists(filename):
        datum[FILE_KEY] = filename
        return datum

    try:
        logging.info('requesting %s', url)
        resp = requests.get(url, **kwargs)
        resp.raise_for_status()
        write_file(filename, resp.text)
        datum[FILE_KEY] = filename
    except Exception as ex:
        logging.warning('error handling %s => %s', url, ex)

    return datum


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('infile', help='file of JSON records to process')
    parser.add_argument('outfile', help='updated JSON records to emit')
    parser.add_argument('prefix', help='path prefix for fetched data')
    parser.add_argument('--request-args', default='{}',
        help='optional JSON serialized args for requests')
    args = parser.parse_args()
    logging.basicConfig(**LOGGING_CFG)

    kwargs = json.loads(args.request_args)
    logging.info('using extra args: %s', kwargs)
    with open(args.infile) as f_in:
        with open(args.outfile, 'w') as f_out:
            for record in map(json.loads, f_in):
                record = fetch(record, args.prefix, **kwargs)
                f_out.write('{}\n'.format(json.dumps(record)))
