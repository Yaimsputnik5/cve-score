import logging
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer


class TfEncoder(object):
    '''Fits TF-IDF transformer for a collection of training documents and
    centers the transform (with respect to the training set).

    The params object is JSON serializable with keys:

        "vocabulary":  array of (string) tokens
        "centers":     list of floats, the "shift factors" for resp dimensions
    '''
    def __init__(self, vocabulary=None, centers=None):
        self._vectorizer = TfidfVectorizer(
            input='content',
            preprocessor=lambda value: value,
            tokenizer=lambda value: value,
            vocabulary=vocabulary,
            use_idf=False,
        )
        self._centers = np.array(centers) if centers else None

    def params(self):
        '''Returns params the params dictionary; see class docstring.'''
        indices = sorted(
            self._vectorizer.vocabulary_.items(), key=lambda pair: pair[1])
        return {
            'vocabulary': [pair[0] for pair in indices],
            'centers': list(self._centers),
        }

    def fit(self, documents):
        '''(Re)computes paramaters from a set of training documents.

        Arguments:
            documents  [iter] iterator of documents, ie, lists of tokens.
        '''
        X = self._vectorizer.fit_transform(documents)
        logging.info('fit term-matrix shape => %s', X.shape)
        self._centers = np.array(X.mean(0).flat)

    def eval(self, documents):
        '''
        Arguments:
            documents  [iter] iterator of documents, ie, lists of tokens.

        Returns: [scipy.csr_matrix]
            Shape (n_doc, n_dim), where n_doc is the number of items returned
            by the interator, n_dim is the size of the vocabulary.
        '''
        xform = self._vectorizer.transform(documents)
        # type(xform) == scipy.sparse.csr.csr_matrix
        # This little stunt recenters rows in place.
        for i in range(xform.shape[0]):
            row = xform.getrow(i)
            p0, p1 = xform.indptr[i], xform.indptr[i+1]
            xform.data[p0:p1] -= self._centers[row.indices]

        return xform
