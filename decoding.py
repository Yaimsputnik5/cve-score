#!/usr/bin/env python3

import logging

import tensorflow as tf

LOGGER = logging.getLogger('cve-score')


def _parse_encoder(params):
    '''Unpacks encoding parameters into at data specifying `tf.Tensor`.
    Returns a triple of the form (<name>, <shape>, <dtype>).
    '''
    if 'vocabulary' in params:
        return (params['key'], [len(params['vocabulary'])], tf.float32)
    if params.get('isLabel', False):
        return (params['key'], [1], tf.int64)
    if params['key'] == 'weight':
        return ('weight', [1], tf.float32)

    raise ValueError('invalid encoding params %s' % params)


def get_parser(config):
    '''Converts a config object into protobuf parser.

    Arguments:
        config  [list] list of dictionaries, each defining an encoder.

    Returns a function with the signature `<protobuf> => (<dict>, <tensor>)`.
    The input is a serialized `tf.train.Example` object, and the output
    is a pair of features/label tensors.
    '''
    decoders = {
        name: tf.FixedLenFeature(shape, dtype)
        for (name, shape, dtype) in map(_parse_encoder, config)
    }
    LOGGER.debug('decoders => %s', decoders)

    label_keys = [
        item['key'] for item in config if item.get('isLabel', False)
    ]
    if len(label_keys) != 1:
        raise ValueError('missing or multiple labels: %s' % label_keys)

    def parser(serialized):
        example = tf.parse_single_example(serialized, decoders)
        label = example.pop(label_keys[0])
        return (example, label)

    return parser


def get_feature_columns(config):
    '''Converts a config object into list of `tf.feature_column` objects
    for use with `tf.estiimator` module.

    Arguments:
        config  [list] list of dictionaries, each defining an encoder.
    '''
    features = [item for item in config if not item.get('isLabel')]
    return [
        tf.feature_column.numeric_column(key, shape, dtype=dtype)
        for (key, shape, dtype) in map(_parse_encoder, features)
    ]
